<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastSocket.Client_1.0</name>
    </assembly>
    <members>
        <member name="T:Sodao.FastSocket.Client.Response.ISeqResponse">
            <summary>
            seq response interface
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.Response.IResponse">
            <summary>
            response interface.
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.Response.ISeqResponse.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.IRequestPendingSendQueue`1">
            <summary>
            待发送队列接口
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.IRequestPendingSendQueue`1.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.IRequestPendingSendQueue`1.DequeueAll">
            <summary>
            出列全部请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.Client.RequestReceivingQueue`1">
            <summary>
            按connectionID分组的接收队列
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Sodao.FastSocket.Client.IRequestReceivingCollection`1">
            <summary>
            接收集合接口
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.IRequestReceivingCollection`1.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.IRequestReceivingCollection`1.Remove(System.Int64,`0)">
            <summary>
            清除指定连接ID下, response匹配的请求并返回
            </summary>
            <param name="connectionID"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.IRequestReceivingCollection`1.Clear(System.Int64)">
            <summary>
            清除指定连接ID下的所有请求并返回
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="F:Sodao.FastSocket.Client.RequestReceivingQueue`1._dic">
            <summary>
            key:connectionID
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.#cctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.#ctor(System.Int32)">
            <summary>
            new
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.FireTimeoutCheckLoop">
            <summary>
            fire loop event.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.Remove(System.Int64,`0)">
            <summary>
            清除指定连接ID下, response匹配的请求并返回
            </summary>
            <param name="connectionID"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.Clear(System.Int64)">
            <summary>
            清除指定连接ID下的所有请求并返回
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.GetItem(System.Int64)">
            <summary>
            get item
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.GetOrAddItem(System.Int64)">
            <summary>
            get or add <see cref="T:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue"/>
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.RemoveItem(System.Int64)">
            <summary>
            remove item
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue">
            <summary>
            item queue
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.#ctor(System.Int32)">
            <summary>
            new
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.TimeoutCheck">
            <summary>
            timeout check
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.Dequeue">
            <summary>
            出列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.DequeueAll">
            <summary>
            全部出列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingQueue`1.ItemQueue.Close">
            <summary>
            close
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.Response.AsyncBinaryResponse">
            <summary>
            async binary response
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Response.AsyncBinaryResponse.Flag">
            <summary>
            flag
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Response.AsyncBinaryResponse.Buffer">
            <summary>
            buffer
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Response.AsyncBinaryResponse.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="flag"></param>
            <param name="seqID"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:Sodao.FastSocket.Client.Response.AsyncBinaryResponse.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.Protocol.BadProtocolException">
            <summary>
            bad protocol exception
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Protocol.BadProtocolException.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Protocol.BadProtocolException.#ctor(System.String)">
            <summary>
            new
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.Client.Protocol.AsyncBinaryProtocol">
            <summary>
            异步二进制协议
            协议格式
            [Message Length(int32)][SeqID(int32)][Request|Response Flag Length(int16)][Request|Response Flag + Body Buffer]
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.Protocol.IProtocol`1">
            <summary>
            协议接口
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.Protocol.IProtocol`1.FindResponse(System.Byte[],System.Int32@)">
            <summary>
            Find Response
            </summary>
            <param name="buffer"></param>
            <param name="readed"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.Protocol.AsyncBinaryProtocol.FindResponse(System.Byte[],System.Int32@)">
            <summary>
            find response
            </summary>
            <param name="buffer"></param>
            <param name="readed"></param>
            <returns></returns>
            <exception cref="T:Sodao.FastSocket.Client.Protocol.BadProtocolException">bad async binary protocl</exception>
        </member>
        <member name="T:Sodao.FastSocket.Client.IServerNode">
            <summary>
            server node interface
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.IServerNode.StateChanged">
            <summary>
            state changed event
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.IServerNode.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.IServerNode.Name">
            <summary>
            get server node name
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.IServerNode.EndPoint">
            <summary>
            get server endPoint
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.IServerNode.CurrentState">
            <summary>
            获取状态
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.IServerNode.CurrentConnection">
            <summary>
            获取当前server node <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/> 对象
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.SocketClient`1">
            <summary>
            socket client
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.#ctor(Sodao.FastSocket.Client.Protocol.IProtocol{`0},Sodao.FastSocket.Client.IRequestReceivingCollection{`0})">
            <summary>
            new
            </summary>
            <param name="protocol"></param>
            <param name="receivingCollection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.#ctor(Sodao.FastSocket.Client.ISocketService{`0},Sodao.FastSocket.Client.Protocol.IProtocol{`0},Sodao.FastSocket.Client.IRequestReceivingCollection{`0})">
            <summary>
            new
            </summary>
            <param name="socketService"></param>
            <param name="protocol"></param>
            <param name="receivingCollection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.#ctor(Sodao.FastSocket.Client.ISocketService{`0},Sodao.FastSocket.Client.Protocol.IProtocol{`0},Sodao.FastSocket.Client.IRequestReceivingCollection{`0},System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketService"></param>
            <param name="protocol"></param>
            <param name="receivingCollection"></param>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.#ctor(Sodao.FastSocket.Client.ISocketService{`0},Sodao.FastSocket.Client.Protocol.IProtocol{`0},Sodao.FastSocket.Client.IRequestReceivingCollection{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketService"></param>
            <param name="protocol"></param>
            <param name="receivingCollection"></param>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <exception cref="T:System.ArgumentNullException">protocol is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">millisecondsSendTimeout</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.OnConnected(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            OnConnected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.OnSendCallback(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            OnSendCallback
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.OnMessageReceived(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.OnDisconnected(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.OnError(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            onError
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.serverPool_Connected(Sodao.FastSocket.Client.IServerNode,Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            node connected
            </summary>
            <param name="node"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.serverPool_NodeStateChanged(Sodao.FastSocket.Client.IServerNode,Sodao.FastSocket.Client.ServerNodeState)">
            <summary>
            node state changed
            </summary>
            <param name="node"></param>
            <param name="state"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.NextRequestSeqID">
            <summary>
            产生不重复的seqID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.RegisterServerNode(System.String,System.Net.IPEndPoint)">
            <summary>
            add socket connector
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.UnRegisterServerNode(System.String)">
            <summary>
            remove socket connector
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.SocketClient`1.Send(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            send request
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="T:Sodao.FastSocket.Client.Protocol.ThriftProtocol">
            <summary>
            thrift protocol
            [message len,4][version,4][cmd len,4][cmd][seqID,4][data...,N]
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Protocol.ThriftProtocol.FindResponse(System.Byte[],System.Int32@)">
            <summary>
            find response
            </summary>
            <param name="buffer"></param>
            <param name="readed"></param>
            <returns></returns>
            <exception cref="T:Sodao.FastSocket.Client.Protocol.BadProtocolException">bad thrift protocol</exception>
        </member>
        <member name="T:Sodao.FastSocket.Client.ISocketService`1">
            <summary>
            socket service interface.
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketService`1.OnConnected(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            当建立socket连接时，会调用此方法
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketService`1.OnSendCallback(Sodao.FastSocket.SocketBase.IConnection,Sodao.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            请求发送回调
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketService`1.OnReceived(Sodao.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            当接收到新消息时，会调用此方法.
            </summary>
            <param name="connection"></param>
            <param name="response"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketService`1.OnDisconnected(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            当socket连接断开时，会调用此方法
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketService`1.OnException(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            当发生异常时，会调用此方法
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Sodao.FastSocket.Client.Response.ThriftResponse">
            <summary>
            thrift response.
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Response.ThriftResponse.Buffer">
            <summary>
            buffer
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Response.ThriftResponse.#ctor(System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="seqID"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:Sodao.FastSocket.Client.Response.ThriftResponse.SeqID">
            <summary>
            get seqID
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.RequestReceivingDictionary`1">
            <summary>
            以request.SeqID为key的接收字典
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="F:Sodao.FastSocket.Client.RequestReceivingDictionary`1._dic">
            <summary>
            key:SeqID
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.#cctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.#ctor(System.Int32)">
            <summary>
            new
            </summary>
            <param name="millisecondsTimeout">超时时间，毫秒数</param>
            <exception cref="T:System.ArgumentOutOfRangeException">millisecondsTimeout小于1</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.FireTimeoutCheckLoop">
            <summary>
            fire loop event.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.Remove(System.Int64,`0)">
            <summary>
            清除指定连接ID下, response匹配的请求并返回
            </summary>
            <param name="connectionID"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.Clear(System.Int64)">
            <summary>
            清除指定连接ID下的所有请求并返回
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestReceivingDictionary`1.TimeoutCheck">
            <summary>
            check timeout request
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.IServerPool">
            <summary>
            server pool interface.
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.IServerPool.TryRegisterNode(System.String,System.Net.EndPoint)">
            <summary>
            try register server node.
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.IServerPool.UnRegisterNode(System.String)">
            <summary>
            remove server node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.IServerPool.Acquire">
            <summary>
            acquire a node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.IServerPool.Acquire(System.Byte[])">
            <summary>
            acquire a node
            </summary>
            <param name="hash">一致性哈希值</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.IServerPool.GetWorkingNodes">
            <summary>
            get working server nodes
            </summary>
            <returns></returns>
        </member>
        <member name="E:Sodao.FastSocket.Client.IServerPool.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.IServerPool.NodeStateChanged">
            <summary>
            server node state changed event
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.DefaultServerNode">
            <summary>
            default server node
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.#ctor(System.String,System.Net.EndPoint,Sodao.FastSocket.SocketBase.IConnectionHost)">
            <summary>
            new
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <param name="host"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.Free(System.Boolean)">
            <summary>
            free
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.connector_Connected(Sodao.FastSocket.Client.ISocketConnector,Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            connected handle
            </summary>
            <param name="connector"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.connector_ConnectFailed(Sodao.FastSocket.Client.ISocketConnector)">
            <summary>
            connect failed handle
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.connection_Disconnected(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            断开连接
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerNode.SetState(Sodao.FastSocket.Client.ServerNodeState)">
            <summary>
            set state
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultServerNode.StateChanged">
            <summary>
            state changed event
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultServerNode.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultServerNode.Name">
            <summary>
            get server node name
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultServerNode.EndPoint">
            <summary>
            get server endPoint
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultServerNode.CurrentState">
            <summary>
            获取状态
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultServerNode.CurrentConnection">
            <summary>
            获取当前server node <see cref="T:Sodao.FastSocket.SocketBase.IConnection"/> 对象
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.ServerNodeState">
            <summary>
            server node state
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.ServerNodeState.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.ServerNodeState.Connected">
            <summary>
            已连上
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.ServerNodeState.Disconnected">
            <summary>
            已断开
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.ServerNodeState.Dead">
            <summary>
            已死
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.ServerNodeState.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.RequestBuilder">
            <summary>
            request builder
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestBuilder.ToThrift(System.String,System.String,System.Int32,System.Byte[],System.Action{System.Exception},System.Action{Sodao.FastSocket.Client.Response.ThriftResponse})">
            <summary>
            to thrift request
            </summary>
            <param name="serviceName"></param>
            <param name="methodName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestBuilder.ToThrift(System.Byte[],System.String,System.String,System.Int32,System.Byte[],System.Object,System.Action{System.Exception},System.Action{Sodao.FastSocket.Client.Response.ThriftResponse})">
            <summary>
            to thrift request
            </summary>
            <param name="consistentKey"></param>
            <param name="serviceName"></param>
            <param name="methodName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="tag"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">payload is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">onException is null</exception>
            <exception cref="T:System.ArgumentNullException">onResult is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestBuilder.ToAsyncBinary(System.String,System.String,System.Int32,System.Byte[],System.Action{System.Exception},System.Action{Sodao.FastSocket.Client.Response.AsyncBinaryResponse})">
            <summary>
            to async binary request
            </summary>
            <param name="serviceName"></param>
            <param name="commandName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.RequestBuilder.ToAsyncBinary(System.Byte[],System.String,System.String,System.Int32,System.Byte[],System.Object,System.Action{System.Exception},System.Action{Sodao.FastSocket.Client.Response.AsyncBinaryResponse})">
            <summary>
            to async binary request
            </summary>
            <param name="consistentKey"></param>
            <param name="serviceName"></param>
            <param name="commandName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="tag"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">commandName is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">onException is null</exception>
            <exception cref="T:System.ArgumentNullException">onResult is null</exception>
        </member>
        <member name="T:Sodao.FastSocket.Client.ISocketConnector">
            <summary>
            socket connector interface
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.ISocketConnector.BeginConnect">
            <summary>
            连接
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.ISocketConnector.ConnectFailed">
            <summary>
            连接失败事件
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.ISocketConnector.Connected">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.ISocketConnector.Name">
            <summary>
            get name
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.ISocketConnector.EndPoint">
            <summary>
            get endpoint
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.DefaultPendingSendQueue`1">
            <summary>
            默认的待发送队列实现
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultPendingSendQueue`1.#ctor(System.Int32)">
            <summary>
            new
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">millisecondsTimeout小于1</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultPendingSendQueue`1.Enqueue(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultPendingSendQueue`1.DequeueAll">
            <summary>
            Dequeue all request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultPendingSendQueue`1.LookupTimeoutRequests">
            <summary>
            lookup timeout request
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultPendingSendQueue`1.SetTimeoutException(Sodao.FastSocket.Client.Request{`0})">
            <summary>
            set timeout excption
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="T:Sodao.FastSocket.Client.Request`1">
            <summary>
            request
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1.CmdName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1.ConsistentKey">
            <summary>
            一致性哈希标识code
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1._onException">
            <summary>
            异常回调
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.Request`1._onResult">
            <summary>
            结果回调
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.Request`1.#ctor(System.String,System.String,System.Int32,System.Byte[],System.Object,System.Action{System.Exception},System.Action{`0})">
            <summary>
            new
            </summary>
            <param name="serviceName">服务名称</param>
            <param name="cmdName">命令名称</param>
            <param name="seqID">seqID</param>
            <param name="payload">发送内容</param>
            <param name="tag">自定义数据</param>
            <param name="onException">异常回调</param>
            <param name="onResult">结果回调</param>
        </member>
        <member name="M:Sodao.FastSocket.Client.Request`1.#ctor(System.Byte[],System.String,System.String,System.Int32,System.Byte[],System.Object,System.Action{System.Exception},System.Action{`0})">
            <summary>
            new
            </summary>
            <param name="consistentKey">一致性哈希标识code, 可为null</param>
            <param name="serviceName">服务名称</param>
            <param name="cmdName">命令名称</param>
            <param name="seqID">seqID</param>
            <param name="payload">发送内容</param>
            <param name="tag">自定义数据</param>
            <param name="onException">异常回调</param>
            <param name="onResult">结果回调</param>
            <exception cref="T:System.ArgumentNullException">onException is null</exception>
            <exception cref="T:System.ArgumentNullException">onResult is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.Request`1.SetSent(System.Int64)">
            <summary>
            设置已发送
            </summary>
            <param name="connectionID"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.Request`1.SetException(System.Exception)">
            <summary>
            set Exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.Request`1.SetResult(`0)">
            <summary>
            set Result
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:Sodao.FastSocket.Client.Request`1.SentTime">
            <summary>
            get sent time
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.Request`1.ConnectionID">
            <summary>
            get sent connectionID
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.DefaultServerPool">
            <summary>
            default server pool
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.DefaultServerPool._dicNodes">
            <summary>
            key:server node name
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.#ctor(Sodao.FastSocket.SocketBase.IConnectionHost)">
            <summary>
            new
            </summary>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.TryRegisterNode(System.String,System.Net.EndPoint)">
            <summary>
            try register server node.
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.UnRegisterNode(System.String)">
            <summary>
            remove server node
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.Acquire">
            <summary>
            acquire a node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.Acquire(System.Byte[])">
            <summary>
            acquire a node
            </summary>
            <param name="hash">一致性哈希值</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.GetWorkingNodes">
            <summary>
            get working server nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.node_Connected(Sodao.FastSocket.Client.IServerNode,Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            node connected
            </summary>
            <param name="node"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.node_StateChanged(Sodao.FastSocket.Client.IServerNode,Sodao.FastSocket.Client.ServerNodeState)">
            <summary>
            node state changed
            </summary>
            <param name="node"></param>
            <param name="state"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultServerPool.Free(System.Boolean)">
            <summary>
            free
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultServerPool.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultServerPool.NodeStateChanged">
            <summary>
            server node state changed event
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.TimeoutException">
            <summary>
            超时异常
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.TimeoutException.Type">
            <summary>
            超时类型
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.TimeoutException.#ctor(Sodao.FastSocket.Client.TimeoutException.TimeoutType)">
            <summary>
            new
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.TimeoutException.#ctor(Sodao.FastSocket.Client.TimeoutException.TimeoutType,System.String)">
            <summary>
            new
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="T:Sodao.FastSocket.Client.TimeoutException.TimeoutType">
            <summary>
            超时类型
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.TimeoutException.TimeoutType.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.TimeoutException.TimeoutType.Send">
            <summary>
            发送
            </summary>
        </member>
        <member name="F:Sodao.FastSocket.Client.TimeoutException.TimeoutType.Receive">
            <summary>
            接收
            </summary>
        </member>
        <member name="T:Sodao.FastSocket.Client.DefaultSocketConnector">
            <summary>
            Socket Connector
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.#ctor(System.String,System.Net.EndPoint,Sodao.FastSocket.SocketBase.IConnectionHost)">
            <summary>
            new
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">endPoint is null</exception>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.BeginConnect">
            <summary>
            开始连接
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.Free(System.Boolean)">
            <summary>
            free
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.BeginConnectInternal">
            <summary>
            开始异步连接
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.ConnectAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            ConnectAsyncCompleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.ConnectAsyncCompletedP(System.Object)">
            <summary>
            ConnectAsyncCompletedP
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.OnConnectFailed">
            <summary>
            fire ConnectFailed
            </summary>
        </member>
        <member name="M:Sodao.FastSocket.Client.DefaultSocketConnector.OnConnected(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            fire Connected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultSocketConnector.ConnectFailed">
            <summary>
            连接失败事件
            </summary>
        </member>
        <member name="E:Sodao.FastSocket.Client.DefaultSocketConnector.Connected">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultSocketConnector.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:Sodao.FastSocket.Client.DefaultSocketConnector.EndPoint">
            <summary>
            endpoint
            </summary>
        </member>
    </members>
</doc>
